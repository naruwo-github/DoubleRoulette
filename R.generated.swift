//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.color` struct is generated, and contains static references to 2 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `navigationItemColor`.
    var navigationItemColor: RswiftResources.ColorResource { .init(name: "navigationItemColor", path: [], bundle: bundle) }

    /// Color `rouletteLabel`.
    var rouletteLabel: RswiftResources.ColorResource { .init(name: "rouletteLabel", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 3 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `arrow1`.
    var arrow1: RswiftResources.ImageResource { .init(name: "arrow1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `arrow2`.
    var arrow2: RswiftResources.ImageResource { .init(name: "arrow2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `setting`.
    var setting: RswiftResources.ImageResource { .init(name: "setting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.file` struct is generated, and contains static references to 2 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `GoogleService-Info.plist`.
    var googleServiceInfoPlist: RswiftResources.FileResource { .init(name: "GoogleService-Info", pathExtension: "plist", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `roulette-sound.mp3`.
    var rouletteSoundMp3: RswiftResources.FileResource { .init(name: "roulette-sound", pathExtension: "mp3", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `DRPopupWithBalloonView`.
    var drPopupWithBalloonView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "DRPopupWithBalloonView", bundle: bundle) }

    /// Nib `DRTableViewCell`.
    var drTableViewCell: RswiftResources.NibReference<DRTableViewCell> { .init(name: "DRTableViewCell", bundle: bundle) }

    /// Nib `DRTemplateTableViewCell`.
    var drTemplateTableViewCell: RswiftResources.NibReference<DRTemplateTableViewCell> { .init(name: "DRTemplateTableViewCell", bundle: bundle) }

    func validate() throws {

    }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }
    var modal: modal { .init(bundle: bundle) }
    var popup: popup { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func modal(bundle: Foundation.Bundle) -> modal {
      .init(bundle: bundle)
    }
    func popup(bundle: Foundation.Bundle) -> popup {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
      try self.main.validate()
      try self.modal.validate()
      try self.popup.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UINavigationController

      let bundle: Foundation.Bundle

      let name = "Main"

      var drRouletteViewController: RswiftResources.StoryboardViewControllerIdentifier<DRRouletteViewController> { .init(identifier: "DRRouletteViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "setting", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'setting' is used in storyboard 'Main', but couldn't be loaded.") }
        if drRouletteViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'drRouletteViewController' could not be loaded from storyboard 'Main' as 'DRRouletteViewController'.") }
      }
    }

    /// Storyboard `Modal`.
    struct modal: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Modal"

      var drRouletteSettingViewController: RswiftResources.StoryboardViewControllerIdentifier<DRRouletteSettingViewController> { .init(identifier: "DRRouletteSettingViewController", storyboard: name, bundle: bundle) }
      var drTemplateListViewController: RswiftResources.StoryboardViewControllerIdentifier<DRTemplateListViewController> { .init(identifier: "DRTemplateListViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if drRouletteSettingViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'drRouletteSettingViewController' could not be loaded from storyboard 'Modal' as 'DRRouletteSettingViewController'.") }
        if drTemplateListViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'drTemplateListViewController' could not be loaded from storyboard 'Modal' as 'DRTemplateListViewController'.") }
      }
    }

    /// Storyboard `Popup`.
    struct popup: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Popup"

      var drResultViewController: RswiftResources.StoryboardViewControllerIdentifier<DRResultViewController> { .init(identifier: "DRResultViewController", storyboard: name, bundle: bundle) }
      var drSaveTemplateViewController: RswiftResources.StoryboardViewControllerIdentifier<DRSaveTemplateViewController> { .init(identifier: "DRSaveTemplateViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIColor(named: "navigationItemColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'navigationItemColor' is used in storyboard 'Popup', but couldn't be loaded.") }
        if drResultViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'drResultViewController' could not be loaded from storyboard 'Popup' as 'DRResultViewController'.") }
        if drSaveTemplateViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'drSaveTemplateViewController' could not be loaded from storyboard 'Popup' as 'DRSaveTemplateViewController'.") }
      }
    }
  }
}